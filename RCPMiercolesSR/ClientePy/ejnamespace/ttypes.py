#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Ciudad(object):
    """
    Attributes:
     - idCiudad
     - nombre
     - latitud
     - longitud
     - baja
    """


    def __init__(self, idCiudad=None, nombre=None, latitud=None, longitud=None, baja=None,):
        self.idCiudad = idCiudad
        self.nombre = nombre
        self.latitud = latitud
        self.longitud = longitud
        self.baja = baja

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.idCiudad = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nombre = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.latitud = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.longitud = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.baja = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Ciudad')
        if self.idCiudad is not None:
            oprot.writeFieldBegin('idCiudad', TType.I32, 1)
            oprot.writeI32(self.idCiudad)
            oprot.writeFieldEnd()
        if self.nombre is not None:
            oprot.writeFieldBegin('nombre', TType.STRING, 2)
            oprot.writeString(self.nombre.encode('utf-8') if sys.version_info[0] == 2 else self.nombre)
            oprot.writeFieldEnd()
        if self.latitud is not None:
            oprot.writeFieldBegin('latitud', TType.STRING, 3)
            oprot.writeString(self.latitud.encode('utf-8') if sys.version_info[0] == 2 else self.latitud)
            oprot.writeFieldEnd()
        if self.longitud is not None:
            oprot.writeFieldBegin('longitud', TType.STRING, 4)
            oprot.writeString(self.longitud.encode('utf-8') if sys.version_info[0] == 2 else self.longitud)
            oprot.writeFieldEnd()
        if self.baja is not None:
            oprot.writeFieldBegin('baja', TType.BOOL, 5)
            oprot.writeBool(self.baja)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Pasajero(object):
    """
    Attributes:
     - DNI
     - nombre
     - apellido
     - telfono
     - email
     - millas
     - clave
     - direccion
     - nacionalidad
    """


    def __init__(self, DNI=None, nombre=None, apellido=None, telfono=None, email=None, millas=None, clave=None, direccion=None, nacionalidad=None,):
        self.DNI = DNI
        self.nombre = nombre
        self.apellido = apellido
        self.telfono = telfono
        self.email = email
        self.millas = millas
        self.clave = clave
        self.direccion = direccion
        self.nacionalidad = nacionalidad

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.DNI = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.nombre = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.apellido = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.telfono = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.email = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.millas = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.clave = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.direccion = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.nacionalidad = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Pasajero')
        if self.DNI is not None:
            oprot.writeFieldBegin('DNI', TType.I32, 1)
            oprot.writeI32(self.DNI)
            oprot.writeFieldEnd()
        if self.nombre is not None:
            oprot.writeFieldBegin('nombre', TType.STRING, 2)
            oprot.writeString(self.nombre.encode('utf-8') if sys.version_info[0] == 2 else self.nombre)
            oprot.writeFieldEnd()
        if self.apellido is not None:
            oprot.writeFieldBegin('apellido', TType.STRING, 3)
            oprot.writeString(self.apellido.encode('utf-8') if sys.version_info[0] == 2 else self.apellido)
            oprot.writeFieldEnd()
        if self.telfono is not None:
            oprot.writeFieldBegin('telfono', TType.STRING, 4)
            oprot.writeString(self.telfono.encode('utf-8') if sys.version_info[0] == 2 else self.telfono)
            oprot.writeFieldEnd()
        if self.email is not None:
            oprot.writeFieldBegin('email', TType.STRING, 5)
            oprot.writeString(self.email.encode('utf-8') if sys.version_info[0] == 2 else self.email)
            oprot.writeFieldEnd()
        if self.millas is not None:
            oprot.writeFieldBegin('millas', TType.DOUBLE, 6)
            oprot.writeDouble(self.millas)
            oprot.writeFieldEnd()
        if self.clave is not None:
            oprot.writeFieldBegin('clave', TType.STRING, 7)
            oprot.writeString(self.clave.encode('utf-8') if sys.version_info[0] == 2 else self.clave)
            oprot.writeFieldEnd()
        if self.direccion is not None:
            oprot.writeFieldBegin('direccion', TType.STRING, 8)
            oprot.writeString(self.direccion.encode('utf-8') if sys.version_info[0] == 2 else self.direccion)
            oprot.writeFieldEnd()
        if self.nacionalidad is not None:
            oprot.writeFieldBegin('nacionalidad', TType.STRING, 9)
            oprot.writeString(self.nacionalidad.encode('utf-8') if sys.version_info[0] == 2 else self.nacionalidad)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CiudadExc(TException):
    """
    Attributes:
     - errorCode
     - errorDetalle
    """


    def __init__(self, errorCode=None, errorDetalle=None,):
        self.errorCode = errorCode
        self.errorDetalle = errorDetalle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorDetalle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('CiudadExc')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorDetalle is not None:
            oprot.writeFieldBegin('errorDetalle', TType.STRING, 2)
            oprot.writeString(self.errorDetalle.encode('utf-8') if sys.version_info[0] == 2 else self.errorDetalle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PasajeroExc(TException):
    """
    Attributes:
     - errorCode
     - errorDetalle
    """


    def __init__(self, errorCode=None, errorDetalle=None,):
        self.errorCode = errorCode
        self.errorDetalle = errorDetalle

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.errorCode = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.errorDetalle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('PasajeroExc')
        if self.errorCode is not None:
            oprot.writeFieldBegin('errorCode', TType.I32, 1)
            oprot.writeI32(self.errorCode)
            oprot.writeFieldEnd()
        if self.errorDetalle is not None:
            oprot.writeFieldBegin('errorDetalle', TType.STRING, 2)
            oprot.writeString(self.errorDetalle.encode('utf-8') if sys.version_info[0] == 2 else self.errorDetalle)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Ciudad)
Ciudad.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'idCiudad', None, None, ),  # 1
    (2, TType.STRING, 'nombre', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'latitud', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'longitud', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'baja', None, None, ),  # 5
)
all_structs.append(Pasajero)
Pasajero.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'DNI', None, None, ),  # 1
    (2, TType.STRING, 'nombre', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'apellido', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'telfono', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'email', 'UTF8', None, ),  # 5
    (6, TType.DOUBLE, 'millas', None, None, ),  # 6
    (7, TType.STRING, 'clave', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'direccion', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'nacionalidad', 'UTF8', None, ),  # 9
)
all_structs.append(CiudadExc)
CiudadExc.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'errorDetalle', 'UTF8', None, ),  # 2
)
all_structs.append(PasajeroExc)
PasajeroExc.thrift_spec = (
    None,  # 0
    (1, TType.I32, 'errorCode', None, None, ),  # 1
    (2, TType.STRING, 'errorDetalle', 'UTF8', None, ),  # 2
)
fix_spec(all_structs)
del all_structs
